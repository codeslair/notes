Git useful commands
1. git show --pretty="" --name-only [commit id]
    list all the files in a commit
2. git diff --cached [filename]
    show difference of staged file from the last commit
    *remove --cached if not yet staged
3. Adding local repo to master #ref https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
   3.1. Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.
   3.2. Open Git Bash.
   3.3. Change the current working directory to your local project.
   3.4. Initialize the local directory as a Git repository.
        git init
   3.5. Add the files in your new local repository. This stages them for the first commit.
        git add .
   3.6. Commit the files that you've staged in your local repository.
        git commit -m "First commit"
   3.7. At the top of your GitHub repository's Quick Setup page, copy the remote repository URL. 
   3.8. In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
        git remote add origin [remote repository URL]
        git remote -v
            *To verify the new remore URL
   3.9. Push the changes in your local repository to GitHub.
        git push origin master
            *Pushes the changes in your local repository up to the remote repository you specified as the origin
4. Updating a local repository with changes from a Github repository
    git pull origin master
5. Remove uncommitted changes
    Tracked files: git checkout -f
        *Undo any changes on tracked files
    Untracked files: git clean -fd
        *Remove any untracked files
6. Merge last two commits
    git rebase --interactive HEAD~2
    pick then squash
        *squash the last commit

    Merge two commits:
       (6)18dc8aa (HEAD -> Chapter3) Chapter3-Replace shopping basket with component. (page 78)
       (5)bff154a Chapter3-Set button class and button title based on parameter
       (4)420983d Chapter3-Replace menu with component. Introduce "StateHasChanged". (page 76)
       (3)1e95b39 (master) Chapter 2: Data and Event Binding
       (2)fc87c04 Add project files.
       (1)ba51d21 Add .gitignore and .gitattributes.

        How to merge (4) and (5) by deleting 5
        6.1. git log --oneline
        6.2. git rebase -i 1e95b39 *It should be (3). Before (4)
        6.3. Change
                pick 420983d Chapter3-Replace menu with component. Introduce "StateHasChanged". (page 76)
                pick bff154a Chapter3-Set button class and button title based on parameter
                pick 18dc8aa Chapter3-Replace shopping basket with component. (page 78)

                pick 420983d Chapter3-Replace menu with component. Introduce "StateHasChanged". (page 76)
                squash bff154a Chapter3-Set button class and button title based on parameter
                pick 18dc8aa Chapter3-Replace shopping basket with component. (page 78)
7. Merge branch to master
    (on branch development)$ git merge master
    (resolve any merge conflicts if there are any)
    git checkout master
    git merge development (there won't be any conflicts now)
8. Compare with previous commit
    git diff HEAD^ [path to file]
9. Compare with specific commit
    git diff [commit id] [path to file]
10. Temporarily save task without pushing to branch(stash)
    git stash
    git stash -u
        *stash including untracked
11. Remove all stashes
    git stash clear
12. Remove specific stash
    git stash drop stash@{n} where n: stash index(git stash list)
13. Remove changes in file from latest commit
    git checkout -- path/to/the/file.txt
14. Git settings
15. Get remote URL
    git config --get remote.origin.url
16. How to add a file to the last commit
    git add the_left_out_file
    git commit --amend --no-edit
17. Show last committed files
    git log --name-only -1
18. Checkout specific branch
    git clone -b [branch] [url]
19. The following command will save your password in memory for sometime.
    git config --global credential.helper cache
    # Set git to use the credential memory cache

    git config --global credential.helper 'cache --timeout=3600'
    # Set the cache to timeout after 1 hour (setting is in seconds)
20. Check if there are changes to push
    git diff --stat --cached [remote/branch]
21. Check if there are changes to pull. Check whether the branch you are tracking is ahead, behind or has diverged.
    git status -uno
22. Show what would be done, without making any changes.
    git fetch --dry-run
23. Pushing code to two remotes
    git remote set-url origin --push --add <a remote>
    git remote set-url origin --push --add <another remote>
    So when you push to origin, it will push to both repositories.
24. Setting proxy
    git config --global http.proxy "Proxy here"
    git config --global http.proxy http://F500050284:password@202.15.153.251:8080/

    to unset: git config --global --unset http.proxy
25. Determine the remote url
    git config --get remote.origin.url
27. Fork a repo. Note: There is no such thing as fork a branch.
    27.1. Navigate to a repository
    27.2. In the top-right corner of the page, click Fork.
28. Configure Git to sync your fork with the original(upstream) repository
    28.1. Clone Forked Repo
    28.2. Check the configured remote repository
          #git remote -v
    28.3. Add upstream repository
          #git remote add upstream [Original/upstream url]
29. Pull Request
    Create a pull request to propose and collaborate on changes to a repository.
    These changes are proposed in a branch, which ensures that the master branch only contains finished and approved work.
    29.1. Choose the branch that contains your commits. 
    29.2. To the right of the Branch menu, click New pull request. 
    29.3. Use the base branch dropdown menu to select the branch you'd like to merge your changes into,
          then use the compare branch drop-down menu to choose the topic branch you made your changes in. 
    29.4. Type a title and description for your pull request.
    29.5. Click Create pull request.
30. Clone with username and password
    git clone https://username:password@github.com/username/repository.git

    You can leave out the password so that it won't be logged your bash history file:
    git clone https://username@github.com/username/repository.git
31. Cloning locally hosted git. Do not use proxy
    [No Proxy]
    git clone <addr of repo> --config http.proxy=
    git clone http://itmserv:3000/ITM-Department/ItmSolution.git --config http.proxy=

    [No Proxy and SSL]
    git clone <addr of repo> --config http.proxy= --config http.sslVerify=false
    git clone http://itmserv:3000/ITM-Department/ItmSolution.git --config http.proxy= --config http.sslVerify=false
32. Visual Studio ignore file
    https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
33. Compare diff between file in local repo and origin
    git diff origin/master -- [loca path]

    To view the differences going from the remote file to the local file:
        git diff remotename/branchname:remote/path/file1.txt local/path/file1.txt

    To view the differences in the other direction:
        git diff HEAD:local/path/file1.txt remotename/branchname:remote/path/file1.txt

    Basically you can diff any two files anywhere using this notation:
        git diff ref1:path/to/file1 ref2:path/to/file2

    As usual, ref1 and ref2 could be branch names, remotename/branchname, commit SHAs, etc.
34. Rename a branch
    git branch -m oldname newname

    If you are on the branch you want to rename:
    git branch -m new-name
35. branch naming
    https://stackoverflow.com/questions/273695/what-are-some-examples-of-commonly-used-practices-for-naming-git-branches

    wip       Works in progress; stuff I know won't be finished soon
    feat      Feature I'm adding or expanding
    bug       Bug fix or experiment
    junk      Throwaway branch created to experiment

    https://gist.github.com/digitaljhelms/4287848
36. Get last update
    git show -1 --stat  
    This git command shows the latest changes commits time and date with message
37. Show affected files of commit
    git log --name-only --oneline
38. Edit log message of the last commit
    git commit --amend -m "an updated commit message"
39. Merge all changes from another branch as a single commit
    git merge --squash <feature branch>
    git commit -m "<message>"
40. Commit by Commit: Reverse Engineering a GitHub Repository
    Create a script file, walkthrough.sh
        nano walkthrough.sh, paste, ctrl + O (save), ctrl + X (exit) 
    chmod +x walkthrough.sh
    ./walkthrough.sh

    #!/bin/bash

    REPO_NAME="FluentCMS"
    REPO_URL="https://github.com/fluentcms/FluentCMS.git"

    # Clone the repo if it doesn't exist
    if [ ! -d "$REPO_NAME" ]; then
        echo "📥 Cloning repository..."
        git clone "$REPO_URL" || { echo "❌ Failed to clone repo"; exit 1; }
    fi

    cd "$REPO_NAME" || { echo "❌ Could not enter repo directory"; exit 1; }

    # Load last commit if exists
    if [ -f "../last_commit.txt" ]; then
        LAST=$(cat ../last_commit.txt)
        SKIP=true
    else
        SKIP=false
    fi

    for commit in $(git rev-list --reverse HEAD); do
        if $SKIP; then
            if [ "$commit" == "$LAST" ]; then
                SKIP=false
            fi
            continue
        fi

        git checkout "$commit"
        echo "$commit" > ../last_commit.txt
        echo "✅ Checked out to $commit"
        read -p "Press enter to continue..."
    done
    --- Batch file ---
    @echo off
    chcp 65001 >nul
    setlocal enabledelayedexpansion

    set "REPO_NAME=FluentCMS"
    set "REPO_URL=https://github.com/fluentcms/FluentCMS.git"

    REM Skip cloning if the repo already exists
    if not exist "%REPO_NAME%" (
        echo 📥 Cloning repository...
        git clone "%REPO_URL%"
        if errorlevel 1 (
            echo ❌ Failed to clone repo
            exit /b 1
        )
    )

    cd "%REPO_NAME%" || (
        echo ❌ Could not enter repo directory
        exit /b 1
    )

    REM Load last commit if exists
    set "SKIP=false"
    if exist "..\last_commit.txt" (
        for /f %%L in ('type "..\last_commit.txt"') do set "LAST=%%L"
        set "SKIP=true"
    )


    echo LAST is %LAST%
    for /f %%B in ('git symbolic-ref refs/remotes/origin/HEAD') do set "BRANCH=%%~nxB"
    for /f %%C in ('git rev-list --reverse origin/!BRANCH!') do (

        set "PROCESS=true"
        if "!SKIP!"=="true" (
            echo Comparing %%C with !LAST!
            pause
            if "%%C"=="!LAST!" (
                echo yes equals
                set "SKIP=false"
            ) else (
                set "PROCESS=false"
                echo PROCESS is false
                pause
            )
        )

        if "!PROCESS!"=="true" (
            git checkout %%C
            echo %%C > "..\last_commit.txt"
            echo ✅ Checked out to %%C
            pause
        )
    )

    endlocal
